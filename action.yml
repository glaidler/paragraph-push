name: 'Paragraph Push Runner'
description: 'Pushes updated code from GitHub to sync with Paragon.'
branding:
  icon: upload-cloud
  color: gray-dark
inputs:
  paragonKey:
    type: string
    required: true
  paragonZeusUrl:
    type: string
    required: false
    default: "https://zeus.useparagon.com"
  paragonDashboardUrl:
    type: string
    required: false
    default: "https://dashboard.useparagon.com"
  path:
    type: string
    description: 'Specify base path to Paragraph project, relative to the working directory.'
    required: false
    default: "./"

runs:
  using: 'composite'
  steps:
    - name: Validate Paragon Git-sync Connection
      id: validateGitSync
      env:
        PARAGON_CLI_KEY: ${{ inputs.paragonKey }}
        PARAGON_HOST_ZEUS: ${{ inputs.paragonZeusUrl }}
        COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
      shell: bash
      run: |
        request_output=$(curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $PARAGON_CLI_KEY" \
          -d "{ \"branchName\": \"${{ github.ref_name }}\", \"author\": \"$COMMIT_AUTHOR\", \"runId\": \"${{ github.run_id }}\", \"hash\": \"${{ github.sha }}\"  }" \
          $PARAGON_HOST_ZEUS/graphite/projects/commit)

        commitId=$(echo "$request_output" | jq -r '.commitId')
        projectId=$(echo "$request_output" | jq -r '.projectId')
        subfolder=$(echo "$request_output" | jq -r '.subfolder')

        echo "commitId=$commitId"   >> $GITHUB_OUTPUT
        echo "projectId=$projectId" >> $GITHUB_OUTPUT
        echo "subfolder=$subfolder" >> $GITHUB_OUTPUT

    - name: Validate Dependency
      id: validate
      shell: bash
      run: |
        if [ "${{ steps.validateGitSync.outputs.projectId }}" = "null" ] || [ "${{ steps.validateGitSync.outputs.commitId }}" = "null" ]; then
          echo "::warning::Branch \"${{ github.ref_name }}\" is not linked to any projects in Paragon.
          See docs on setting up Git Sync for a branch: https://docs.useparagon.com/paragraph/setting-up-git-sync

          Proceeding with a build-only run (no contents will be pushed to Paragon)..."
          echo "valid=false" >> $GITHUB_OUTPUT

        elif [ -z "${{ inputs.paragonKey }}" ]; then
          echo "::warning:: \"paragonKey\" is not provided."
          echo "valid=false" >> $GITHUB_OUTPUT

        elif [ -z "${{ inputs.paragonZeusUrl }}" ]; then
          echo "::warning:: \"paragonZeusUrl\" is not provided."
          echo "valid=false" >> $GITHUB_OUTPUT 

        elif [ -z "${{ inputs.paragonDashboardUrl }}" ]; then
          echo "::warning:: \"paragonDashboardUrl\" is not provided."
          echo "valid=false" >> $GITHUB_OUTPUT

        else
          echo "valid=true" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.1
      with:
        node-version: v18.17.1

    - name: Check for project-level para CLI
      id: checkProjectCLI
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        deps=$(npm list | grep @useparagon/cli | wc -l)
        echo "deps=$deps" >> $GITHUB_OUTPUT

    - name: Install para CLI
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        npm install --include=dev

    - name: Install para CLI globally
      if: steps.checkProjectCLI.outputs.deps == '0'
      shell: bash
      run: |
        npm install -g @useparagon/cli

    - name: Authenticate into CLI
      env:
        PARAGON_CLI_KEY: ${{ inputs.paragonKey }}
        PARAGON_HOST_DASHBOARD: ${{ inputs.paragonDashboardUrl }}
        PARAGON_HOST_ZEUS: ${{ inputs.paragonZeusUrl }}
      shell: bash
      run: |
        mkdir -p ~/.paragon
        cat << EOF > ~/.paragon/credentials.json
        {
          "default": {
            "profile": "default",
            "token": "$PARAGON_CLI_KEY"
          }
        }
        EOF
        cat << EOF > ~/.paragon/profiles.json
        {
          "default": {
            "name": "default",
            "default": true,
            "services": {
              "zeus": "$PARAGON_HOST_ZEUS",
              "dashboard": "$PARAGON_HOST_DASHBOARD"
            }
          }
        }
        EOF

    - name: Build Paragraph project
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        npx para install
        npx para build

    - name: Push to Paragon
      shell: bash
      working-directory: ${{ inputs.path }}
      if: github.event_name == 'push' && steps.validate.outputs.valid == 'true'
      run: npx para push

    # Post steps
    - name: Update success status in Paragon
      shell: bash
      env:
        PARAGON_CLI_KEY: ${{ inputs.paragonKey }}
        PARAGON_HOST_ZEUS: ${{ inputs.paragonZeusUrl }}
        PROJECT_ID: ${{ steps.validateGitSync.outputs.projectId }}
        COMMIT_ID: ${{ steps.validateGitSync.outputs.commitId }}
      if: success() && steps.validate.outputs.valid == 'true'
      run: |
        echo "Commit succeeded!"
        curl -X PATCH \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $PARAGON_CLI_KEY" \
          -d "{ \"projectId\": \"$PROJECT_ID\", \"commitId\": \"$COMMIT_ID\", \"runId\": \"${{ github.run_id }}\", \"success\": true, \"hash\": \"${{ github.sha }}\"  }" \
          $PARAGON_HOST_ZEUS/graphite/projects/commit

    - name: Update failed status in Paragon
      shell: bash
      env:
        PARAGON_CLI_KEY: ${{ inputs.paragonKey }}
        PARAGON_HOST_ZEUS: ${{ inputs.paragonZeusUrl }}
        PROJECT_ID: ${{ steps.validateGitSync.outputs.projectId }}
        COMMIT_ID: ${{ steps.validateGitSync.outputs.commitId }}
      if: failure() && steps.validate.outputs.valid == 'true'
      run: |
        echo "Commit failed!"
        curl -X PATCH \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $PARAGON_CLI_KEY" \
          -d "{ \"projectId\": \"$PROJECT_ID\", \"commitId\": \"$COMMIT_ID\", \"runId\": \"${{ github.run_id }}\", \"success\": false }" \
          $PARAGON_HOST_ZEUS/graphite/projects/commit
